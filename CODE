### For Predictive Modeling ###

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from google.colab import files

uploaded = files.upload()
file_name = list(uploaded.keys())[0]  
data = pd.read_csv(file_name)

# Preprocessing and Encoding categorical variables
data['Has Table booking'] = data['Has Table booking'].map({'Yes': 1, 'No': 0})
data['Has Online delivery'] = data['Has Online delivery'].map({'Yes': 1, 'No': 0})

# features and target variable
features = ['Price range', 'Votes', 'Has Table booking', 'Has Online delivery']
target = 'Aggregate rating'

data = data.dropna(subset=features + [target])

# Splitting the dataset into features (X) and target (y)
X = data[features]
y = data[target]

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(random_state=42),
    "Random Forest": RandomForestRegressor(random_state=42, n_estimators=100)
}

# Training and evaluating each model
results = {}

for model_name, model in models.items():
    # Train the model
    model.fit(X_train, y_train)
    # Predict on the test set
    y_pred = model.predict(X_test)
    # Evaluate the model
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    # Storing results
    results[model_name] = {"MAE": mae, "MSE": mse, "RÂ²": r2}

# Displaying results
results_df = pd.DataFrame(results).T
print("\nModel Performance Comparison:")
print(results_df)

### For Costumer preference Analysis ###

import pandas as pd

file_name = 'Dataset .csv'  
data = pd.read_csv(file_name)

data = data.dropna(subset=['Cuisines', 'Aggregate rating', 'Votes'])

# 1. Analyzing the relationship between the type of cuisine and restaurant's rating
cuisine_ratings = data.groupby('Cuisines')['Aggregate rating'].mean().sort_values(ascending=False)
print("\nAverage Ratings by Cuisine:")
print(cuisine_ratings)

# 2. Identifying most popular cuisines based on the number of votes
cuisine_votes = data.groupby('Cuisines')['Votes'].sum().sort_values(ascending=False)
print("\nMost Popular Cuisines by Votes:")
print(cuisine_votes)

# 3. Determining cuisines that tend to receive higher ratings
# Filter for cuisines with a significant number of restaurants to avoid skewed results
min_restaurants = 10  # Threshold to consider cuisines with enough data points
cuisine_counts = data['Cuisines'].value_counts()
significant_cuisines = cuisine_counts[cuisine_counts >= min_restaurants].index

highly_rated_cuisines = cuisine_ratings[significant_cuisines].sort_values(ascending=False)
print("\nHighly Rated Cuisines (with significant data):")
print(highly_rated_cuisines)

### For Data Visualization ###

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

file_name = 'Dataset .csv' 
data = pd.read_csv(file_name)

data = data.dropna(subset=['Cuisines', 'Aggregate rating', 'Votes', 'City'])

sns.set(style="whitegrid")

# 1. Distribution of ratings (Histogram)
plt.figure(figsize=(8, 6))
sns.histplot(data['Aggregate rating'], bins=10, kde=True, color='blue')
plt.title('Distribution of Aggregate Ratings')
plt.xlabel('Aggregate Rating')
plt.ylabel('Frequency')
plt.show()

# 2. Average ratings of different cuisines (Bar Plot)
average_ratings_by_cuisine = data.groupby('Cuisines')['Aggregate rating'].mean().sort_values(ascending=False).head(10)
plt.figure(figsize=(10, 6))
average_ratings_by_cuisine.plot(kind='bar', color='orange')
plt.title('Average Ratings of Top 10 Cuisines')
plt.xlabel('Cuisine')
plt.ylabel('Average Rating')
plt.xticks(rotation=45)
plt.show()

# 3. Average ratings by city (Bar Plot)
average_ratings_by_city = data.groupby('City')['Aggregate rating'].mean().sort_values(ascending=False).head(10)
plt.figure(figsize=(10, 6))
average_ratings_by_city.plot(kind='bar', color='green')
plt.title('Average Ratings by Top 10 Cities')
plt.xlabel('City')
plt.ylabel('Average Rating')
plt.xticks(rotation=45)
plt.show()

# 4. Relationship between Votes and Ratings (Scatter Plot)
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Votes', y='Aggregate rating', data=data, alpha=0.7)
plt.title('Votes vs Aggregate Ratings')
plt.xlabel('Votes')
plt.ylabel('Aggregate Rating')
plt.show()

# 5. Boxplot of Ratings by Price Range
plt.figure(figsize=(8, 6))
sns.boxplot(x='Price range', y='Aggregate rating', data=data, palette='coolwarm')
plt.title('Aggregate Ratings by Price Range')
plt.xlabel('Price Range')
plt.ylabel('Aggregate Rating')
plt.show()

# 6. Correlation Heatmap
plt.figure(figsize=(8, 6))
correlation_matrix = data[['Aggregate rating', 'Votes', 'Price range']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='viridis', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()
